%{
#include <iostream>
#include <cstdlib>
#include <string>
#include <map>
  using namespace std;
  
#define YYDEBUG 1
  
  void yyerror(string s) {
    cerr << s << endl;
    exit(EXIT_FAILURE);
  }

  int yylex();

  map<string, string> deklaracije;
  
  string izdvoji(string s){
    string *t = new string("");
    map<string, string>::iterator tmp = deklaracije.begin();
    while(tmp!=deklaracije.end()){
        if((tmp->second).compare(s)==0){
            if(t->compare("")!=0)
                 t->append(", ");
            t->append(tmp->first);
           
        }
        tmp++;
    }
    
     if(t->compare("")!=0){
        t->append(" : ");
        t->append(s);
        t->append(";\n");
    }
    t->insert(0, "  ");
    return *t;
  }
  
  
  
  int tab = 0;
  string tabovi(){
    string *s = new string("");
    int i;
    for (i=0; i<tab; i++)
        s->append("    ");
    return *s;
  }
  
  string *indTip = new string();
  int eraseln = 0;
%}

%left vj_token mj_token
%left '+' '-' 
%left '*' '/'

%union {
  string *s;
}

%token <s> num_token
%token <s> id_token
%token <s> jlkom_token 
%token <s> vlkom_token
%token <s> str_token
%token <s> lib_token
%token name_token int_token double_token main_token cin_token cout_token endl_token exit_token 
%token opUpis_token opIspis_token vj_token mj_token if_token else_token min_token max_token
%type <s> Program M Blok E Nn N Dd Nis Nul T W Inc R K S Nb B

%%

//Biblioteke Namespace Main,  S je belina
Program: Nb S Nns S M S  {
    $$ = $1;
    $$ -> append(*$2); delete $2;
    if(!deklaracije.empty())
        $$ -> append("Var\n");
    $$ -> append(izdvoji("Integer"));  
    $$ -> append(izdvoji("real"));
    $$ -> append(*$5); delete $5;
    $$ -> push_back('\n');
    cout<<*$$; delete $$;
}
;

Nb: Nb S B { 
    $$=$1;
    $$->append(*$2); delete $2;
    $$->append(*$3); delete $3;
}
| B { $$ = $1;}
;

//Biblioteka
B: lib_token {
    if($1->compare("iostream")!=0){
        if($1->compare("algorithm")==0){
            $$ = new string("uses ");
            $$ -> append("math;"); delete $1;
        }
    }
    else{
        $$ = new string("");
    }
    
}
;

Nns: Nns S Ns {}
| {}
;

Ns: name_token {}
;

//main
M: int_token  main_token  '('  ')' S Blok {
    $$=$5;
    $$->append(*$6); delete $6;
    $$->push_back('.');
    
}
;

Blok: Lz S Nn S Dz {
    $$ = new string("");
    $$ -> append(tabovi());
    $$ -> append("begin");
    $$ -> append(*$2); delete $2;
    $$ -> append(*$3); delete $3;
    
    if(eraseln){
        if(($4->size())>1)
            $4->erase(0, 1);  // brisemo red, jedino ako je visak
        eraseln=0;
    }
    
    $$ -> append(*$4); delete $4;
    $$ -> append(tabovi());
    $$ -> append("end");
    
}
;

Lz: '{' { tab+=1; }
;

Dz: '}' { tab-=1; }
;

//niz naredbi
Nn: Nn S R {
    $$=$1;
    
    if(eraseln){
        $2->erase(0, 1);  // u slucaju da je data neka naredba u cpp koja se ne pise u pascalu
        eraseln=0;
    }
    $$ -> append(*$2);
    delete $2;
    $$ -> append(*$3);
    if($3->compare("")==0){
        eraseln = 1;
    }
    else{
        eraseln = 0;
    }
    delete $3;
}
| {
    $$ = new string("");
}
;

// red
R: K{
    $$ = $1;
}
| N{
    if($1->compare("")!=0){
        $$ = new string(tabovi());
        $$ -> append(*$1); delete $1;
    }
    else{
        $$=$1; 
    }
}
;

// komentar
K: jlkom_token {
    $$ = $1;
    $$->erase(0, 2);
    $$->erase($$->size()-1,1);
    $$->insert(0, "{");
    $$->insert(0, tabovi());
    $$->append(" }\n");
}
| vlkom_token {
    $$ = $1;
    $$->erase(0, 2);
    $$->insert(0, "{*");
    $$->insert(0, tabovi());
    $$->erase($$->size()-2,2);
    $$->append("*}");

}
;

//novi red
S: S '\n' { $$ = $1; $$ -> push_back('\n'); }
| { $$ = new string("");}
;

//naredba
N: Blok {
    $$ = $1; 
        cout<<"blok: "<<*$$<<endl;

}
| T Inc ';' { 
    if($2->compare("")!=0){
        $$ = $2;
        $$ -> push_back(';');
    }
    else{
        $$ = new string("");
    }
}
| cin_token Nul ';' { 
    $$ = new string("read(");
    $$->append(*$2); delete $2;
    $$->append(");");

}
| cout_token Nis ';' {
    $$ = new string("writeln(");
    $$->append(*$2); delete $2;
    $$->append(");");

}
| exit_token num_token ';' {
    $$ = new string("");

}
| ';' {
    $$ = new string("");

}
| if_token '(' E ')' S Blok S else_token S Blok {
    $$ = new string("");
    $$->append("if ( ");
    $$->append(*$3); delete $3;
    $$->append(" ) then \n");
    $$->append(*$5); delete $5;
    $$->append(*$6); delete $6;
    $$->append(*$7); delete $7;
    $$->append("\n");
    $$->append(tabovi());
    $$->append("else\n");
    $$->append(*$9); delete $9;
    $$->append(*$10); delete $10;
    $$->append(";");
}
| Dd {
    $$ = $1;
    $$->push_back(';');
}
;

//tip
T: int_token {
    $$ = new string("Integer");
    delete indTip;
    indTip = new string("Integer");
}
| double_token {
    $$ = new string("real");
    delete indTip;
    indTip = new string("real");
}
;

//sve sto moze doci posle tipa, dodele ili deklaracije
Inc: Inc ',' Dd {
   if($1->compare("")!=0) 
        $1 -> append(";\n"+tabovi());
    $1 -> append(*$3); delete $3;
    $$ = $1;
}
| Inc ',' id_token {
    $$ = $1;
    deklaracije[*$3] = *indTip; delete $3;
    $$ = $1;
}
| Dd {
    $$ = $1;

}
| id_token {
    $$ = new string("");
    deklaracije[*$1] = *indTip; delete $1;
    
}
;

//dodela
Dd: id_token '=' E {
    deklaracije[*$1] = *indTip; 
    $$ = $1; 
    $$ -> append(" := ");
    $$ -> append(*$3); delete $3;
}
;

//niz koji dolazi posle cin , samo identifikatori
Nul: Nul opUpis_token id_token {
    $1 -> append(", ");
    $1->append(*$3); delete $3;
    $$ = $1;
}
| opUpis_token id_token {
    $$ = $2;
}
;

//niz posle cout, bilo sta
Nis: Nis opIspis_token W {
    if($3->compare("")!=0)
        $1 -> append(", ");
    $1->append(*$3); delete $3;
    $$ = $1;
}
| opIspis_token W {
    $$ = $2;
}
;

W: E {
    $$ = $1;
}
| endl_token {
    $$ = new string(""); // Ne znam oznaku za novi red u Pascalu. Writeln prelazi u novi red, ali koja je oznaka, ako zelim koristiti write?
}
;

//izraz
E: E '+' E {
    $$ = $1;
    $$ -> append(" + ");
    $$ -> append(*$3); delete $3;
}
| E '-' E {
    $$ = $1;
    $$ -> append(" - ");
    $$ -> append(*$3);  delete $3;
}
| E '*' E {
    $$ = $1;
    $$ -> append(" * ");
    $$ -> append(*$3);  delete $3;
}
| E '/' E {
    $$ = $1;
    $$ -> append(" / ");
    $$ -> append(*$3);  delete $3;
}
| id_token {
    $$ = $1;
}
| num_token {
    $$ = $1;
}
| '(' E ')' {
    $$ = new string("( ");
    $$ -> append(*$2);  delete $2;
    $$->append(" )");
}
| min_token '(' E ',' E ')' {
    $$ = new string("min(");
    $$->append(*$3); delete $3;
    $$->append(", ");
    $$->append(*$5); delete $5;
    $$->append(")");

}
| max_token '(' E ',' E ')' {
    $$ = new string("max(");
    $$->append(*$3); delete $3;
    $$->append(", ");
    $$->append(*$5); delete $5;
    $$->append(")");
}
| E vj_token E {
    $$ = $1;
    $$ -> append(" >= ");
    $$ -> append(*$3);  delete $3;
}
| E mj_token E {
    $$ = $1;
    $$ -> append(" <= ");
    $$ -> append(*$3);  delete $3;
}
| str_token {
    $$ = new string("\'");
    $$->append(*$1); delete $1;
    $$->append("\'");
    
}
;

%%
int main() {
  //yydebug = 1;
  yyparse();
  return 0;
}

